# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-06-21 20:08
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import picklefield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='HotlineUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AdditionalRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('request_type', models.CharField(choices=[('CALL_ME', 'Call me'), ('CHARGE_ME', 'Top-up my account'), ('RING', 'Ring.'), ('SMS', 'SMS'), ('WEB', 'Web'), ('SMS_SPAM', 'SMS (SPAM)')], max_length=50)),
                ('sms_message', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-created_on', '-id'),
            },
        ),
        migrations.CreateModel(
            name='BlacklistedNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identity', models.CharField(max_length=30, unique=True)),
                ('call_count', models.PositiveIntegerField(default=1)),
            ],
        ),
        migrations.CreateModel(
            name='CachedData',
            fields=[
                ('slug', models.CharField(max_length=75, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('data_type', models.CharField(choices=[('object', 'Object'), ('file', 'File')], default='object', max_length=50)),
                ('value', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CallbackAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('NEW_REQUEST', 'New'), ('NOT_ANSWERING', 'Not answering'), ('HANDLED', 'Handled'), ('IS_BUSY', 'Busy'), ('BLACK_LIST', 'Black listed'), ('GAVE_UP', 'Gave up')], max_length=50)),
            ],
            options={
                'ordering': ('-created_on', '-id'),
                'get_latest_by': 'created_on',
            },
        ),
        migrations.CreateModel(
            name='Cluster',
            fields=[
                ('slug', models.SlugField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('slug', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('entity_type', models.CharField(choices=[('state', 'State'), ('lga', 'LGA'), ('ward', 'Ward'), ('autre', 'Other')], max_length=30)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='douentza.Entity', verbose_name='Parent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ethnicity',
            fields=[
                ('slug', models.SlugField(max_length=200, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=40, verbose_name='Name')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='HotlineRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('identity', models.CharField(max_length=30, verbose_name='Number')),
                ('operator', models.CharField(blank=True, choices=[('unknown', 'Unknown')], max_length=50, null=True)),
                ('hotline_number', models.CharField(blank=True, max_length=30, null=True)),
                ('status', models.CharField(choices=[('NEW_REQUEST', 'New'), ('NOT_ANSWERING', 'Not answering'), ('HANDLED', 'Handled'), ('IS_BUSY', 'Busy'), ('BLACK_LIST', 'Black listed'), ('GAVE_UP', 'Gave up')], default='NEW_REQUEST', max_length=50)),
                ('received_on', models.DateTimeField()),
                ('event_type', models.CharField(choices=[('CALL_ME', 'Call me'), ('CHARGE_ME', 'Top-up my account'), ('RING', 'Ring.'), ('SMS', 'SMS'), ('WEB', 'Web'), ('SMS_SPAM', 'SMS (SPAM)')], max_length=50)),
                ('sms_message', models.TextField(blank=True, null=True)),
                ('responded_on', models.DateTimeField(blank=True, null=True, verbose_name='Date of Call')),
                ('age', models.PositiveIntegerField(blank=True, null=True, verbose_name='Age')),
                ('sex', models.CharField(choices=[('unknown', 'Unknown'), ('male', 'Male'), ('female', 'Female')], default='unknown', max_length=20, verbose_name='Gender')),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Call duration (seconds)', null=True, verbose_name='Callback duration')),
                ('email', models.EmailField(blank=True, max_length=250, null=True, verbose_name='E-mail')),
                ('cluster', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='douentza.Cluster')),
                ('ethnicity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='douentza.Ethnicity', verbose_name='Ethnicity')),
                ('hotline_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='douentza.Entity', verbose_name='Location')),
            ],
            options={
                'ordering': ('received_on',),
                'get_latest_by': 'received_on',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0, help_text='Display order. Higher is displayed first. 0 equals no priority (cration order)', verbose_name='Order')),
                ('label', models.CharField(help_text='Question label', max_length=200, verbose_name='Question')),
                ('question_type', models.CharField(choices=[('string', 'Short text'), ('text', 'Text'), ('boolean', 'True/False'), ('date', 'Date'), ('int', 'Number (integer)'), ('float', 'Number (float)'), ('choice', 'Choice List'), ('multi_choice', 'Multiple Choice List')], max_length=30)),
                ('required', models.BooleanField(verbose_name='Answer required')),
            ],
            options={
                'ordering': ('-order',),
                'get_latest_by': 'order',
            },
        ),
        migrations.CreateModel(
            name='QuestionChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(max_length=20)),
                ('label', models.CharField(max_length=70, verbose_name='Choice')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionchoices', to='douentza.Question')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Survey name', max_length=200, verbose_name='Title')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('status', models.CharField(choices=[('created', 'Started'), ('ready', 'Ready'), ('disabled', 'Disabled')], default='created', max_length=50)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='SurveyTaken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taken_on', models.DateTimeField(default=django.utils.timezone.now)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_takens', to='douentza.HotlineRequest')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_takens', to='douentza.Survey')),
            ],
            options={
                'ordering': ('-taken_on',),
            },
        ),
        migrations.CreateModel(
            name='SurveyTakenData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', picklefield.fields.PickledObjectField(blank=True, editable=False, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_taken_data', to='douentza.Question')),
                ('survey_taken', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='survey_taken_data', to='douentza.SurveyTaken')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('slug', models.CharField(max_length=50, primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('slug',),
            },
        ),
        migrations.AddField(
            model_name='question',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='douentza.Survey'),
        ),
        migrations.AddField(
            model_name='hotlinerequest',
            name='project',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='douentza.Project', verbose_name='Project'),
        ),
        migrations.AddField(
            model_name='hotlinerequest',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='requests', to='douentza.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='callbackattempt',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='callbackattempts', to='douentza.HotlineRequest'),
        ),
        migrations.AddField(
            model_name='additionalrequest',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additionalrequests', to='douentza.HotlineRequest'),
        ),
        migrations.AddField(
            model_name='hotlineuser',
            name='cluster',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='douentza.Cluster'),
        ),
        migrations.AddField(
            model_name='hotlineuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='hotlineuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='surveytakendata',
            unique_together=set([('survey_taken', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='surveytaken',
            unique_together=set([('survey', 'request')]),
        ),
        migrations.AlterUniqueTogether(
            name='questionchoice',
            unique_together=set([('slug', 'question')]),
        ),
        migrations.AlterUniqueTogether(
            name='hotlinerequest',
            unique_together=set([('identity', 'received_on')]),
        ),
    ]
